# -*- coding: utf-8 -*-
"""
Django base settings for mytd2 project.

Generated by 'django-admin startproject' using Django 1.11.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

from __future__ import annotations

import logging
import os
import sentry_sdk
import typing
import unittest
from django.contrib.gis.geos import Point
from django.core.exceptions import ImproperlyConfigured
from django.urls import reverse as url_reverse
from dotenv import load_dotenv
from kombu.utils.url import safequote
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.logging import LoggingIntegration, ignore_logger
from urllib.parse import urlparse

from organizations.settings import ORGANIZATION_MAX_NUMBER_OF_ACCOUNTS
from utils.aws.credentials import (
    aws_secrets_manager_get_or_create_secret,
    aws_secrets_manager_get_secret,
)
from utils.aws.s3 import get_s3_endpoint_hostname


def get_bool_env(key, default=None):
    value = os.environ.get(key, None)
    if value is None:
        return default
    if value.isdigit():
        return bool(int(value))
    return value.lower() == "true"


load_dotenv()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
RUNTIME_HELPERS_DIR = os.path.join(BASE_DIR, "runtime_helpers")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "SECRET_KEY", "uth&8mzfvsn_#hvjvmxa-t)te70*y*c2yboyj#ad$bc6ny1eyk"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_bool_env("DEBUG", False)

ENVIRONMENT = os.environ.get("ENVIRONMENT", "development")
_ALLOWED_ENVIRONMENTS = {"testing", "production", "development"}
if ENVIRONMENT is None:
    raise EnvironmentError(f"Environment variable 'ENVIRONMENT' not found.")
if ENVIRONMENT not in _ALLOWED_ENVIRONMENTS:
    raise EnvironmentError(
        f"Invalid value for environment variable 'ENVIRONMENT'. "
        f"Expected one of {_ALLOWED_ENVIRONMENTS}, but got 'ENVIRONMENT'."
    )
ENVIRONMENT_SHORT_NAME = {
    "testing": "test",
    "production": "prod",
    "development": "dev",
}.get(ENVIRONMENT)

# custom attributes for determine further DJANGO settings
SERVICE_ID = os.environ.get("SERVICE_ID", "api")
DOMAINS = os.environ.get(
    "DOMAINS", os.environ.get("DOMAIN", "api.mytrafficdata.dcdev")
).split(",")
DOMAIN = DOMAINS[0]

ALLOWED_HOSTS = (
    None
    if not os.environ.get("ALLOWED_HOSTS", None)
    else os.environ["ALLOWED_HOSTS"].split(",")
)
# allow loopback interface and service domain by default
if not ALLOWED_HOSTS:
    ALLOWED_HOSTS = [
        "localhost",
        "127.0.0.1",
        "[::1]",
        "host.docker.internal",
        "api",
        *["{}.{}".format(SERVICE_ID, _domain) for _domain in DOMAINS],
    ]

ALLOWED_HOSTS_ADD = (
    None
    if not os.environ.get("ALLOWED_HOSTS_ADD", None)
    else os.environ["ALLOWED_HOSTS_ADD"].split(",")
)

# URL for the client application (used for example in activation / password reset emails)
URL_CLIENT_APPLICATION = os.environ.get(
    "URL_CLIENT_APPLICATION", f"https://www.{DOMAIN}"
)

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Application definition

INSTALLED_APPS = [
    # custom
    "mytd2",
    "mytd2.monkey_patching.MonkeyPatchingAppConfig",
    "accounts",
    "configurations",
    "organizations.apps.OrganizationsConfig",
    "measuring",
    "measuring.data",
    "reporting",
    "system",
    "billing",
    # django
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.postgres",
    "django.contrib.gis",
    "django.contrib.staticfiles",
    # third-party
    "storages",
    "djcelery_email",
    "django_extensions",
    "user_tasks",
    "django_celery_results",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_referrer_policy.middleware.ReferrerPolicyMiddleware",
    "mytd2.middleware.XRobotsTagMiddleware",
    "mytd2.middleware.CSPMiddleware",
]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": os.environ.get("POSTGRES_NAME", "postgres"),
        "USER": os.environ.get("POSTGRES_USER", "postgres"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD", None),
        "HOST": os.environ.get("POSTGRES_HOST", "127.0.0.1"),
        "PORT": os.environ.get("POSTGRES_PORT", "5432"),
    }
}

# use persistent database connections in production
CONN_MAX_AGE = 0 if DEBUG else None

# AWS Secret Manager ID for dynamically obtaining the RDS credentials
AWS_SECRET_POSTGRES = os.environ.get("AWS_SECRET_POSTGRES")

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGES = (
    ("en-us", "English"),
    ("de", "German"),
    ("fr", "French"),
    ("es", "Spanish"),
)

LANGUAGE_CODE = "en-us"

LOCALE_PATHS = (os.path.join(BASE_DIR, "locale"),)

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# files
# https://docs.djangoproject.com/en/1.11/topics/files/

# See django-storages section for MEDIA_URL and DEFAULT_FILE_STORAGE
MEDIA_ROOT = os.environ.get(
    "MEDIA_ROOT", os.path.join(os.path.dirname(BASE_DIR), "media")
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

# See django-storages section for STATIC_URL and STATICFILES_STORAGE
STATIC_ROOT = os.path.join(
    os.environ.get("STATIC_ROOT", os.path.join(os.path.dirname(BASE_DIR), "static")),
    SERVICE_ID,
)

# miscellaneous settings
# https://docs.djangoproject.com/en/1.11/topics/settings/

ROOT_URLCONF = "mytd2.urls"

WSGI_APPLICATION = "mytd2.wsgi.application"

AUTH_USER_MODEL = "accounts.User"

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# AWS settings
AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
AWS_REGION_NAME = os.environ.get("AWS_REGION_NAME", "eu-central-1")
_AWS_SETTINGS_FOR_SECRETS_MANAGER = dict(
    aws_access_key_id=AWS_ACCESS_KEY_ID,
    aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
    region=AWS_REGION_NAME,
    fallback_to_settings=False,
)

# django-storages (Amazon S3)
# http://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html

# Files opened from S3 are spooled in memory until this limit is reached.
# Large MOT files read from S3 easily exceed the container's memory if no limit is set (default).
AWS_S3_MAX_MEMORY_SIZE = 1024 * 1024 * 1024

# AWS S3 general settings
AWS_S3_ACCESS_KEY_ID = os.environ.get("AWS_S3_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
AWS_S3_SECRET_ACCESS_KEY = os.environ.get(
    "AWS_S3_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY
)
AWS_S3_REGION_NAME = os.environ.get("AWS_S3_REGION_NAME", AWS_REGION_NAME)
AWS_S3_ENDPOINT_URL = os.environ.get("AWS_S3_ENDPOINT_URL", None)

# AWS S3/CoundFront for static files
AWS_STORAGE_STATIC_BUCKET_NAME = os.environ.get("AWS_STORAGE_STATIC_BUCKET_NAME")

if AWS_STORAGE_STATIC_BUCKET_NAME:
    STATICFILES_STORAGE = "utils.storages.StaticRootS3BotoStorage"
    AWS_S3_CUSTOM_STATIC_DOMAIN = os.environ.get(
        "AWS_S3_CUSTOM_STATIC_DOMAIN", os.environ.get("STATIC_URL", None)
    )
    _STATIC_URL = AWS_S3_CUSTOM_STATIC_DOMAIN or os.path.join(
        urlparse(AWS_S3_ENDPOINT_URL).netloc
        if AWS_S3_ENDPOINT_URL
        else get_s3_endpoint_hostname(AWS_S3_REGION_NAME),
        AWS_STORAGE_STATIC_BUCKET_NAME,
    )
else:
    STATICFILES_STORAGE = "utils.storages.StaticRootStorage"
    AWS_S3_CUSTOM_STATIC_DOMAIN = None
    _STATIC_URL = os.environ.get("STATIC_URL", "/static/")

STATIC_URL = os.path.join("//", _STATIC_URL, "")
STATIC_URL_PARSED = urlparse(STATIC_URL)

# AWS S3/CoundFront for media files
AWS_STORAGE_MEDIA_BUCKET_NAME = os.environ.get("AWS_STORAGE_MEDIA_BUCKET_NAME")
AWS_S3_CUSTOM_MEDIA_DOMAIN = os.environ.get("AWS_S3_CUSTOM_MEDIA_DOMAIN", None)

if AWS_STORAGE_MEDIA_BUCKET_NAME:
    DEFAULT_FILE_STORAGE = "utils.storages.MediaRootS3BotoStorage"
    # AWS Secret Manager ID for dynamically obtaining the CloudFront private key
    AWS_SECRET_CLOUD_FRONT_KEY = os.environ.get("AWS_SECRET_CLOUD_FRONT_KEY")
    with open(os.path.join(BASE_DIR, "mytd2/fixtures/cloudfront.debug.key"), "r") as f:
        AWS_SECRET_DEFAULT_CLOUD_FRONT_PRIVATE_KEY = f.read()
    AWS_S3_CUSTOM_MEDIA_DOMAIN = os.environ.get(
        "AWS_S3_CUSTOM_MEDIA_DOMAIN", os.environ.get("MEDIA_URL", None)
    )
    _MEDIA_URL = AWS_S3_CUSTOM_MEDIA_DOMAIN or os.path.join(
        urlparse(AWS_S3_ENDPOINT_URL).netloc
        if AWS_S3_ENDPOINT_URL
        else get_s3_endpoint_hostname(AWS_S3_REGION_NAME),
        AWS_STORAGE_MEDIA_BUCKET_NAME,
    )
else:
    DEFAULT_FILE_STORAGE = "utils.storages.OverwriteStorage"
    AWS_S3_CUSTOM_MEDIA_DOMAIN = None
    _MEDIA_URL = os.environ.get("MEDIA_URL", "/media/")

MEDIA_URL = os.path.join("//", _MEDIA_URL, "")
MEDIA_URL_PARSED = urlparse(MEDIA_URL)

# eMail settings
# https://docs.djangoproject.com/en/1.11/topics/email/
DEFAULT_FROM_EMAIL = "MyTrafficData 2 <no-reply@{}>".format(DOMAIN)
SERVER_EMAIL = "error@mytrafficdata2.com"
EMAIL_SUBJECT_PREFIX = "[MyTrafficData 2]"

_EMAIL_BACKEND_CHOICES = {
    "smtp": "django.core.mail.backends.smtp.EmailBackend",
    "console": "django.core.mail.backends.console.EmailBackend",
    "file": "django.core.mail.backends.filebased.EmailBackend",
    "locmem": "django.core.mail.backends.locmem.EmailBackend",
    "dummy": "django.core.mail.backends.dummy.EmailBackend",
    "aws_ses": "django_amazon_ses.EmailBackend",
}
_EMAIL_BACKEND_NAME = os.environ.get("EMAIL_BACKEND", "console")
EMAIL_BACKEND = "djcelery_email.backends.CeleryEmailBackend"
CELERY_EMAIL_BACKEND = _EMAIL_BACKEND_CHOICES[_EMAIL_BACKEND_NAME]

# switch EMAIL_BACKEND when running in DEBUG mode
if DEBUG:
    CELERY_EMAIL_BACKEND = _EMAIL_BACKEND_CHOICES[
        os.environ.get("DEBUG_EMAIL_BACKEND", "console")
    ]

if _EMAIL_BACKEND_NAME == "smtp":
    SMTP_DEFAULT_EMAIL_HOST = "security.datacollect.com"
    SMTP_DEFAULT_EMAIL_PORT = 25
    SMTP_EMAIL_USE_TLS = False
    SMTP_EMAIL_HOST_USER = ""
    SMTP_EMAIL_HOST_PASSWORD = ""
    # Obtain the SMTP credentials from AWS secret manager if the secret is set.
    _AWS_SECRET_SMTP = os.environ.get("AWS_SECRET_SMTP")
    _smtp_settings = (
        {}
        if not _AWS_SECRET_SMTP
        else aws_secrets_manager_get_or_create_secret(
            _AWS_SECRET_SMTP,
            default={
                "EMAIL_HOST": SMTP_DEFAULT_EMAIL_HOST,
                "EMAIL_PORT": SMTP_DEFAULT_EMAIL_PORT,
                "EMAIL_USE_TLS": SMTP_EMAIL_USE_TLS,
                "EMAIL_HOST_USER": SMTP_EMAIL_HOST_USER,
                "EMAIL_HOST_PASSWORD": SMTP_EMAIL_HOST_PASSWORD,
            },
            json_value=True,
            **_AWS_SETTINGS_FOR_SECRETS_MANAGER,
        )
    )
    EMAIL_HOST = os.environ.get(
        "EMAIL_HOST", _smtp_settings.get("EMAIL_HOST", SMTP_DEFAULT_EMAIL_HOST)
    )
    EMAIL_PORT = os.environ.get(
        "EMAIL_PORT", _smtp_settings.get("EMAIL_PORT", SMTP_DEFAULT_EMAIL_PORT)
    )
    EMAIL_USE_TLS = os.environ.get(
        "EMAIL_USE_TLS", _smtp_settings.get("EMAIL_USE_TLS", SMTP_EMAIL_USE_TLS)
    )
    EMAIL_HOST_USER = os.environ.get(
        "EMAIL_HOST_USER", _smtp_settings.get("EMAIL_HOST_USER", SMTP_EMAIL_HOST_USER)
    )
    EMAIL_HOST_PASSWORD = os.environ.get(
        "EMAIL_HOST_PASSWORD",
        _smtp_settings.get("EMAIL_HOST_PASSWORD", SMTP_EMAIL_HOST_PASSWORD),
    )

# django cache backend
# https://docs.djangoproject.com/en/2.1/topics/cache/#using-a-custom-cache-backend
_CACHE_BACKEND_CHOICES = {
    "locmem": "django.core.cache.backends.locmem.LocMemCache",
    "database": "django.core.cache.backends.db.DatabaseCache",
    "filesystem": "django.core.cache.backends.filebased.FileBasedCache",
    "memcached": "django.core.cache.backends.memcached.MemcachedCache",
    "dummy": "django.core.cache.backends.dummy.DummyCache",
    "redis": "django_redis.cache.RedisCache",
}
_CACHE_BACKEND_NAME = os.environ.get("CACHE_BACKEND", "memcached")
_CACHE_OPTIONS = {}
if _CACHE_BACKEND_NAME == "redis":
    _CACHE_OPTIONS = {"CLIENT_CLASS": "django_redis.client.DefaultClient"}
_CACHE_LOCATION = os.environ.get("CACHE_LOCATION", "127.0.0.1:11211")
if _CACHE_LOCATION:
    _CACHE_LOCATION = _CACHE_LOCATION.split(",")
CACHES = {
    "default": {
        "BACKEND": _CACHE_BACKEND_CHOICES[_CACHE_BACKEND_NAME],
        "LOCATION": _CACHE_LOCATION,
        "TIMEOUT": os.environ.get("CACHE_TIMEOUT", 300),
        "KEY_PREFIX": os.environ.get("CACHE_KEY_PREFIX", "mytd2_api_"),
        "OPTIONS": _CACHE_OPTIONS,
    }
}

ADMINS = [
    (
        "Markus Büttgenbach",
        "buettgenbach@datacollect.com",
    ),
]

# start shell plus with ipython by default
SHELL_PLUS = "ipython"
NOTEBOOK_ARGUMENTS = []

ALLOW_DJANGO_SHELL_PLUS = get_bool_env("ALLOW_DJANGO_SHELL_PLUS", False)
if ALLOW_DJANGO_SHELL_PLUS is True:
    NOTEBOOK_ARGUMENTS = [
        "--ip",
        "0.0.0.0",
        "--port",
        os.environ.get("DJANGO_SHELL_PLUS_PORT", "8888"),
        "--allow-root",
    ]

# django-amazon-ses (AWS SES)
# https://github.com/azavea/django-amazon-ses
AWS_SES_REGION = os.environ.get("AWS_SES_REGION_NAME", AWS_REGION_NAME)
AWS_SES_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
AWS_SES_SECRET_ACCESS_KEY = os.environ.get(
    "AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY
)

# logging
# https://docs.djangoproject.com/en/1.11/topics/logging/
# also consider default logging configuration (`DEFAULT_LOGGING`) in `django.utils.DEFAULT_LOGGING`
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_false": {"()": "django.utils.log.RequireDebugFalse"},
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "formatters": {
        "simple": {"format": "%(levelname)s: %(message)s"},
        "django.server": {
            "()": "django.utils.log.ServerFormatter",
            "format": "[{server_time}] {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "django.server": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "django.server",
        },
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler",
            "include_html": True,
        },
    },
    "loggers": {
        "": {
            "handlers": ["console", "mail_admins"],
            "level": "DEBUG",
        },
        "django": {
            "handlers": ["console", "mail_admins"],
            "level": "INFO",
            "propagate": False,
        },
        "django.server": {
            "handlers": ["django.server"],
            "level": "INFO",
            "propagate": False,
        },
        "django.db.backends": {
            "level": "DEBUG" if get_bool_env("LOG_SQL_QUERIES", False) else "INFO",
            "handlers": ["console"],
            "propagate": False,
        },
    },
}

DEFAULT_EXCEPTION_REPORTER = (
    "mytd2.exception_reporter.ExceptionReporterWithoutTracebackWhenEmailed"
)

# XFrameOptionsMiddleware settings
# https://docs.djangoproject.com/en/1.11/ref/clickjacking/#setting-x-frame-options-for-all-responses
X_FRAME_OPTIONS = "DENY"

# SecurityMiddleware
# https://docs.djangoproject.com/en/1.11/ref/middleware/#django.middleware.security.SecurityMiddleware
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
# SECURE_SSL_REDIRECT is handled outside the application


# mytd2.middleware.XRobotsTagMiddleware
X_ROBOTS_TAG = {"default": ["none"]}

# django-referrer-policy
# https://github.com/ubernostrum/django-referrer-policy
REFERRER_POLICY = "same-origin"

# django-csp settings
# https://github.com/mozilla/django-csp
# middleware needs to be added in the specific application settings file
CSP_DEFAULT_SRC = ("'none'",)
CSP_SCRIPT_SRC = (STATIC_URL_PARSED.netloc or "'self'",)
CSP_STYLE_SRC = (STATIC_URL_PARSED.netloc or "'self'",)
CSP_IMG_SRC = ("'self'",) + (
    (STATIC_URL_PARSED.netloc,) if STATIC_URL_PARSED.netloc else tuple()
)
CSP_FONT_SRC = tuple()
CSP_OBJECT_SRC = ("'none'",)
CSP_CONNECT_SRC = tuple()
# custom middleware mytd2.api.CSPMiddleware setting to disable generating a nonce on each request
CSP_DISABLE_NONCE = True
# custom middleware mytd2.api.CSPMiddleware setting that applies the CSP header only to HTML content
CSP_FOR_HTML_ONLY = True


# Sentry.io: https://docs.sentry.io/platforms/python/guides/django/
def traces_sampler(sampling_context: typing.Dict[str, dict]):
    # if (
    #     sampling_context.get("wsgi_environ", {})
    #     .get("PATH_INFO", "")
    #     .startswith(url_reverse("v1:usertaskstatus-stats"))
    # ):
    #     # Once every hundred calls
    #     return 0.01
    return 0.2


SENTRY_DSN = os.environ.get("SENTRY_DSN", None)
if os.environ.get("AWS_SECRET_SENTRY_DSN", None):
    SENTRY_DSN = aws_secrets_manager_get_secret(
        os.environ.get("AWS_SECRET_SENTRY_DSN"), **_AWS_SETTINGS_FOR_SECRETS_MANAGER
    )

if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[
            DjangoIntegration(),
            LoggingIntegration(
                level=logging.INFO,  # Capture info and above as breadcrumbs
                event_level=logging.WARNING,  # Send warnings/errors as events
            ),
        ],
        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True,
        traces_sampler=traces_sampler,
        environment=ENVIRONMENT,
    )
    ignore_logger("track_counting.loaders.frames_loader")

# Celery and Queue
# https://github.com/celery/celery
# https://aws.amazon.com/de/sqs/

# general (AWS) SQS settings
CELERY_SQS_BROKER_USER = safequote(
    os.environ.get("CELERY_SQS_BROKER_USER", AWS_ACCESS_KEY_ID or "test")
)
CELERY_SQS_BROKER_PASSWORD = safequote(
    os.environ.get("CELERY_SQS_BROKER_PASSWORD", AWS_SECRET_ACCESS_KEY or "test")
)
CELERY_SQS_BROKER_HOST = os.environ.get("CELERY_SQS_BROKER_HOST", "")
AWS_SQS_REGION_NAME = os.environ.get("AWS_SQS_REGION_NAME", AWS_REGION_NAME)

# consider kombu bug: https://github.com/celery/kombu/issues/239
# `CELERY_BROKER_URL` needs to be explicitly set to `sqs://` when running AWS ECS service, thus
# this has to be defined as environment setting in the services task definition
CELERY_BROKER_URL = os.environ.get(
    "CELERY_BROKER_URL",
    f"sqs://{CELERY_SQS_BROKER_USER}:{CELERY_SQS_BROKER_PASSWORD}@{CELERY_SQS_BROKER_HOST}",
)

CELERY_BROKER_TRANSPORT_OPTIONS = {
    "region": AWS_SQS_REGION_NAME,
    # coordinate `visibility_timeout` with ETA and countdown
    # see https://docs.celeryproject.org/en/latest/getting-started/brokers/sqs.html#caveats
    "visibility_timeout": int(os.environ.get("CELERY_SQS_VISIBILITY_TIMEOUT", 60)),
    "queue_name_prefix": "celery-",
}

CELERY_BEAT_SCHEDULE_FILENAME = os.environ.get("CELERY_BEAT_SCHEDULE_FILENAME", None)

CELERY_TASK_DEFAULT_QUEUE = "mytd2-default"
CELERY_TASK_SOFT_TIME_LIMIT = int(
    os.environ.get("CELERY_TASK_SOFT_TIME_LIMIT", 60 * 30)
)
CELERY_TASK_TIME_LIMIT = int(os.environ.get("CELERY_TASK_TIME_LIMIT", 60 * 60))
CELERY_TASK_ROUTES = {
    "measuring.tasks.create_measurement_from_upload": {"queue": "mytd2-counting"},
    "measuring.tasks.update_measurement_from_data_set": {"queue": "mytd2-counting"},
    "measuring.tasks.split_uploaded_files": {"queue": "mytd2-counting"},
    "measuring.tasks.create_and_merge_measurement_from_uploads": {
        "queue": "mytd2-counting"
    },
    "system.tasks.sleep": {"queue": "mytd2-counting"},
}
CELERY_TASK_ALWAYS_EAGER = get_bool_env("CELERY_TASK_ALWAYS_EAGER", False)
CELERY_TASK_PROTOCOL = 1  # django-user-tasks depends on protocol version 1
CELERY_RESULT_BACKEND = "django-cache"

USER_TASK_LOG_PROGRESS_INTERVAL_IN_SECONDS = 5

# testing
TEST_RUNNER = "utils.tests.CustomTestSuiteRunner"
unittest.util._MAX_LENGTH = os.getenv("ASSERT_MAX_LENGTH", 99999 if DEBUG else 80)
unittest.TestCase.maxDiff = os.getenv("ASSERT_MAX_DIFF", None if DEBUG else 80 * 8)

# track-counting (https://github.com/DataCollectGmbH/track-counting/)
TRACK_COUNTING_PUBLISH_INCOMPLETE_TRACKS = get_bool_env(
    "TRACK_COUNTING_PUBLISH_INCOMPLETE_TRACKS", False
)


# accounts application

ACCOUNTS_DEFAULT_UNUSABLE_PASSWORD_IF_DEBUG = "datacollect"
ACCOUNTS_PASSWORD_RESET_URL = os.environ.get(
    "ACCOUNTS_PASSWORD_RESET_URL", "auth/setPassword"
)
ACCOUNTS_CONFIRM_URL = os.environ.get("ACCOUNTS_CONFIRM_URL", "auth/confirm")

# application settings
BILLING_EMAIL = "argos@datacollect.com"

# organizations application

# the default distributor is used as default `Organization` instance for each `User` object created by the
# `createsuperuser` management command
ORGANIZATIONS_DEFAULT_DISTRIBUTOR_DATA = {
    "role": 1,
    "master_data_id": "00001",
    "name": "DataCollect TrafficSystems GmbH",
    "unit": "Vertrieb",
    "coordinates": Point(6.67964, 50.89197, srid=4326),
    "timezone": "Europe/Berlin",
    "homepage": "http://www.datacollect.com",
    "logo": "",
    "logo_width": None,
    "logo_height": None,
    "address_street": "Heinrich-Hertz-Straße 1",
    "address_postal_code": "50170",
    "address_city": "Kerpen",
    "address_region": "NRW",
    "address_country_code": "DE",
    "max_active_users": ORGANIZATION_MAX_NUMBER_OF_ACCOUNTS,
}

# measuring application

# AWS Secret Manager ID for ARGOS SSL certificate
AWS_SECRET_ARGOS_UI_SSL_CERT = os.environ.get("AWS_SECRET_ARGOS_UI_SSL_CERT")
if not DEBUG and not AWS_SECRET_ARGOS_UI_SSL_CERT:
    raise ImproperlyConfigured(
        "Please provide the `AWS_SECRET_ARGOS_UI_SSL_CERT` environment variable!"
    )

ARGOS_UI_DEFAULT_SSL_CERT = {}
if not AWS_SECRET_ARGOS_UI_SSL_CERT:
    with open(
        os.path.join(BASE_DIR, "measuring/fixtures/argos-ui.debug.crt"), "r"
    ) as f:
        ARGOS_UI_DEFAULT_SSL_CERT["cert"] = f.read()
    with open(
        os.path.join(BASE_DIR, "measuring/fixtures/argos-ui.debug.key"), "r"
    ) as f:
        ARGOS_UI_DEFAULT_SSL_CERT["private_key"] = f.read()

# Allows importing of ARGOS files without signature for non-superusers.
# This is mainly used for testing purposes. Do not activate this for production environments.
# Defaults to the DEBUG setting.
ARGOS_ALLOW_MISSING_SIGNATURE = get_bool_env("ALLOW_MISSING_SIGNATURE", DEBUG)

# system application
SYSTEM_DATA_ROOT = os.environ.get(
    "SYSTEM_DATA_ROOT",
    os.path.join(os.path.dirname(BASE_DIR), "system"),
)
ARGOS_RELEASES_STORAGE = "system.utils.argos_releases.ArgosReleasesLocalStorage"
AWS_ARGOS_RELEASES_BUCKET_NAME = os.environ.get("AWS_ARGOS_RELEASES_BUCKET_NAME", None)
if AWS_ARGOS_RELEASES_BUCKET_NAME:
    ARGOS_RELEASES_STORAGE = "system.utils.argos_releases.ArgosReleasesS3BotoStorage"

# measuring application
AWS_IOT_REGISTER_THING_ON_DEVICE_PROVISIONING_ENABLED = get_bool_env(
    "AWS_IOT_REGISTER_THING_ON_DEVICE_PROVISIONING_ENABLED", True
)
AWS_IOT_USE_EXISTING_CERTIFICATE_ON_DEVICE_PROVISIONING = get_bool_env(
    "AWS_IOT_USE_EXISTING_CERTIFICATE_ON_DEVICE_PROVISIONING", False
)
AWS_IOT_REVOKE_EXISTING_CERTIFICATE_ON_DEVICE_PROVISIONING = get_bool_env(
    "AWS_IOT_REVOKE_EXISTING_CERTIFICATE_ON_DEVICE_PROVISIONING", True
)
assert (
    AWS_IOT_USE_EXISTING_CERTIFICATE_ON_DEVICE_PROVISIONING
    ^ AWS_IOT_REVOKE_EXISTING_CERTIFICATE_ON_DEVICE_PROVISIONING
), (
    "Both AWS_IOT_REVOKE_EXISTING_CERTIFICATE_ON_DEVICE_PROVISIONING and "
    "AWS_IOT_REVOKE_EXISTING_CERTIFICATE_ON_DEVICE_PROVISIONING cannot be True."
)


# See https://www.amazontrust.com/repository/
# and https://docs.aws.amazon.com/iot/latest/developerguide/server-authentication.html#server-authentication-certs
AWS_IOT_ROOT_CA_URLS = [
    "https://www.amazontrust.com/repository/AmazonRootCA1.pem",
    "https://www.amazontrust.com/repository/AmazonRootCA2.pem",
    "https://www.amazontrust.com/repository/AmazonRootCA3.pem",
    "https://www.amazontrust.com/repository/AmazonRootCA4.pem",
    "https://www.amazontrust.com/repository/SFSRootCAG2.pem",
]

AWS_IOT_ENDPOINT = os.environ.get("AWS_IOT_ENDPOINT", "iot.mytrafficdata2.com")
AWS_IOT_PORT = int(os.environ.get("AWS_IOT_PORT", "8883"))
AWS_IOT_ARGOS_DEVICE_TOPIC = os.environ.get(
    "AWS_IOT_ARGOS_DEVICE_TOPIC", "argos/devices/{serial}/up/{{measurement_id}}/"
)

# Teltonika
_teltonika_rms_settings = {
    "BASE_API_URL": os.environ.get(
        "TELTONIKA_RMS_BASE_API_URL", "https://rms.teltonika-networks.com/"
    ),
    "PAT": os.environ.get("TELTONIKA_RMS_PAT"),
    "COMPANY_ID": os.environ.get("TELTONIKA_RMS_COMPANY_ID", "74700"),
    "DESTINATION_IP": get_bool_env("TELTONIKA_RMS_DESTINATION_IP", "192.168.1.100"),
}
# Obtain the TELTONIKA RMS credentials from AWS secret manager if the secret is set.
_AWS_SECRET_TELTONIKA_RMS = os.environ.get("AWS_SECRET_TELTONIKA_RMS")
if _AWS_SECRET_TELTONIKA_RMS:
    _teltonika_rms_settings = aws_secrets_manager_get_or_create_secret(
        _AWS_SECRET_TELTONIKA_RMS,
        default=_teltonika_rms_settings,
        json_value=True,
        **_AWS_SETTINGS_FOR_SECRETS_MANAGER,
    )

TELTONIKA_RMS_BASE_API_URL = _teltonika_rms_settings["BASE_API_URL"]
TELTONIKA_RMS_PAT = _teltonika_rms_settings["PAT"]
TELTONIKA_RMS_COMPANY_ID = _teltonika_rms_settings["COMPANY_ID"]
TELTONIKA_RMS_DESTINATION_IP = _teltonika_rms_settings["DESTINATION_IP"]
TELTONIKA_RMS_AUTO_CREDIT = get_bool_env("TELTONIKA_RMS_AUTO_CREDIT", True)

# Path Settings
FAILED_FILES_DIR = "failed"
MEASUREMENT_TIMELINES_DIR = "split"

GIT_INFO_FILE_PATH = os.path.join(RUNTIME_HELPERS_DIR, "git_info.txt")


# Argos Kinesis Consumer Settings
AKC_APPLICATION_NAME = os.environ.get("AKC_APPLICATION_NAME")
AKC_STREAM_NAME = os.environ.get("AP_KINESIS_OUTPUT_NAME")
AKC_BUCKET_NAME = os.environ.get("AP_S3_RAW_COUNTING_DATA_BUCKET_NAME")
AKC_CUSTOM_AWS_ENDPOINT = os.environ.get("AWS_ENDPOINT_URL", "http://localstack:4566")
AKC_USE_CUSTOM_ENDPOINT_URL = DEBUG

# load admin application?
LOAD_ADMIN_APP = SERVICE_ID != "admin" and get_bool_env("LOAD_ADMIN_APP", False)

if LOAD_ADMIN_APP:
    from mytd2.admin.settings import *
